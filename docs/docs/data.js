
var ydata = {
	"tst":"",
	"player_scene":"<h2 style=\"direction: ltr;\">player scene<\/h2>\r\n\r\n<p style=\"direction: ltr;\">player is the scene that holds the ship the player controls with all its elements, from the ships 3d modal to 2d ui, game camera (3rd\/first cockpit) etc etc .<\/p>\r\n\r\n<p style=\"direction: ltr;\">its a very important scene, its the main scene the player interacts with.<\/p>\r\n\r\n<p style=\"direction: ltr;\">the script is attached to the root node.<\/p>\r\n\r\n<p style=\"direction: ltr;\">the nodes are as follows:<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>player<\/strong>: this node is the root node its a&nbsp;kinematic body, its attributes and methods are used to move the ship scene.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>Area<\/strong>: not implemented in code (not used) it will be used to handle the ships collision detection (like when it hits a bullet), for now its has a sphere object as its collision shape.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>Camera<\/strong>: for now its the main camera, placed behind the ship for a third-person view.<\/p>\r\n\r\n<p style=\"direction: ltr;\">camera 2 not used as of yet.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>guns<\/strong>: a spatial object that is the parent of all the positions of the ships guns.<\/p>\r\n\r\n<p style=\"direction: ltr;\">the guns are position3d nodes, when the player shoots, the bullets will appear where the guns are, one bullet for each gun (the code loops all the 3dpositions under guns spatial node.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>craft_speederA<\/strong>: thats the ships 3d modal<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>target<\/strong>: is the old target<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>target3 and&nbsp;target4<\/strong>: are the new targets for the guns, i put them on the same vector as the guns positions,<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>target2<\/strong>: is the holder of the red 3d arrow indicator that points to the player enemy fighter target (the code make it point to the enemy target).&nbsp;<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>shieldmesh<\/strong>: will be shown only when player is hit enemy fighters has this too, when the ship gets hit it will apear for a moment<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n",
	"enemy_scene":"<h2 style=\"direction: ltr;\">enemy scene<\/h2>\r\n\r\n<p style=\"direction: ltr;\">the enemy scene is the only ai controlled fighter at the moment.<\/p>\r\n\r\n<p style=\"direction: ltr;\">it uses the fighter.gd script.<\/p>\r\n\r\n<h3 style=\"direction: ltr;\">nodes:<\/h3>\r\n\r\n<p style=\"direction: ltr;\">$<strong>enemy<\/strong>: the root node its a 3d kinematic body<\/p>\r\n\r\n<p style=\"direction: ltr;\">$<strong>MeshInstance<\/strong>: the placeholder for the modal<\/p>\r\n\r\n<p style=\"direction: ltr;\">$<strong>area<\/strong>: an area node for handling collision,inside (its chield node) is a&nbsp; collision shape node, its a bit bigger then the ship modal so its easier to hit.<\/p>\r\n\r\n<p style=\"direction: ltr;\">$<strong>CollisionShape2<\/strong>: another&nbsp;CollisionShape node,not used as of now<\/p>\r\n\r\n<p style=\"direction: ltr;\">$<strong>modal<\/strong>: the ship modal from kenny free space modals<\/p>\r\n\r\n<p style=\"direction: ltr;\">$<strong>shieldmesh<\/strong>: only shown when ship is hit,its a mesh instance a 3d&nbsp; ellipse,color blue with opacity.<\/p>\r\n\r\n<p style=\"direction: ltr;\">$<strong>enemy_pointer<\/strong>: was ment to be the 2d pointer on the player screen, not used.<\/p>\r\n\r\n<p style=\"direction: ltr;\">$<strong>target_tracker<\/strong>: thats the &quot;enemy_pointer&quot;, a 2d shape on the player screen that shows the enemies position direction off screen.<\/p>\r\n\r\n<p style=\"direction: ltr;\">$<strong>guns<\/strong>: a spatial node holding 3d positions representing the ships gun barrles position. fighter.gd will create a bullet at each gun position when the ship shots.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n",
	"big_ship_scene":"<h2 style=\"direction: ltr;\">big ship scene<\/h2>\r\n\r\n<p style=\"direction: ltr;\">its supposed to be very modular so you can create any capital ship by adding a couple nodes like your 3d modal, collision\/area node and hardpoints (ship turrets etc).<\/p>\r\n\r\n<p style=\"direction: ltr;\">the root node must be 3d&nbsp;kinematic body node. you attach to it the big_ship.gd script and change a couple of custom parameters.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>hardpoints<\/strong>: basically these are weapons you can attach to the ship (the ship_hardpoints scenes), you must create a&nbsp; hardpoints spatial node, under it (as its children) drag and drop\/add the hardpoints you want and position them on the ships modal.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n",
	"mission_manger_gdscript":"<h2 style=\"direction: ltr;\">mission manger.gd<\/h2>\r\n\r\n<p style=\"direction: ltr;\">mission manager is a scene you drop at a level, change its script variables from the godot visual editor, and it will handle the level wining conditions all without writing a single line of code.<\/p>\r\n\r\n<p style=\"direction: ltr;\">you fill the mission type, targets and timer (depending o the type) and thats it.<\/p>\r\n\r\n<p style=\"direction: ltr;\">lets say its a destroy mission, you type destroy and then is the mission target input you type the scenes\/game objects (separated by comma like &quot;enemy1,bigship1,enemy2&quot;) the player needs to destroy to pass the level.<\/p>\r\n\r\n<p style=\"direction: ltr;\">its not everything you need for a level manager, it dosnt handle cinematics(voice or whatever) it dosnt handle end screen etc.<\/p>\r\n\r\n<p style=\"direction: ltr;\">in the future it will expand beyond the two mission types i made.<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<h3 style=\"direction: ltr;\">variables\/attributes:<\/h3>\r\n\r\n<p style=\"direction: ltr;\"><strong>ye<\/strong>: is short for &quot;yoel engine&quot; which is a helper class with useful functions i put in every one of my projects (in fact i have one like it for almost every game project i made not only in godot).<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>mission_type<\/strong>: its the mission type the users (level designer) selected mission type for this level (the scene he drop this instance of&nbsp;mission manager), for now its either &quot;destroy&quot; or &quot;survive&quot;. this string variable will determine which code will run in the update function (and that code will determine the mission goals and what happens when thier done).<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>mission_targets<\/strong>: if its&nbsp;&quot;destroy&quot; or &quot;survive&quot; the player will need to destroy or protect these targets, depending&nbsp; on the mission type. &quot;on paper&quot; the data this var holds is names of objects\/scenes in the parent scene (the level scene) separated by a comma, like:&quot;enemy1,enemy2,some_target&quot;, later in the functions handling this data slit function will be used to turn it into an array.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>parent<\/strong>: a reference to the level scene which is that parent of this object.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>mission_timer<\/strong>,mission_timer_count: a timer used by mission type when it runs out stuff will happen (usually either the player loses or wins)<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>mission_goto_locations<\/strong>: this will be an array of 3d positions the player will need to reach in certain types of missions, not used as of now its a concept.<\/p>\r\n\r\n<h3 style=\"direction: ltr;\">functions\/methods:<\/h3>\r\n\r\n<p style=\"direction: ltr;\"><strong>_process<\/strong>: the update function acording to the mission_type string it will run a function.<\/p>\r\n\r\n<p style=\"direction: ltr;\">most are not implamented yet only&nbsp;destroy and survive for now.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>destroy_target<\/strong>: if all targets are destroyed do something (end level).<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>survive<\/strong>: here the goal of the mission is to survive a certain amount of time (until the timer is done and also make sure friendly targets survive ( friendly targets from &quot;targs_to_destroy&quot;in this case its used for&nbsp; friendly, ships from the players team).<\/p>\r\n\r\n<p style=\"direction: ltr;\">once the timer is done end level.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>check_if_all_targets_destroyed<\/strong>:<\/p>\r\n\r\n<p style=\"direction: ltr;\">does what it says returns true if all targets are not valid (!is_instance_valid()).<\/p>\r\n\r\n<p style=\"direction: ltr;\">used both in survive and&nbsp;destroy_target funcs.<\/p>\r\n\r\n<p style=\"direction: ltr;\">it splits&nbsp;mission_targets by comma, gets the number of objects, loops all targets if thier not valid (removed from the level scene) incrament&nbsp;target_dead_count counter.<\/p>\r\n\r\n<p style=\"direction: ltr;\">if&nbsp;target_count == target_dead_count it means all targets are&nbsp;destroyed return true.<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n",
	"weapon_gdscript":"<h2>weapon gdscript<\/h2>\r\n<p style=\"direction: ltr;\">the weapon class is built to manage all the logic and data related to weapons, need 3 weapons on an object?ship? whatever? instantiate 3 weapon instances pass the name of the weapon and use its methods to shot or whatever.<\/p>\r\n\r\n<p style=\"direction: ltr;\">for now thers only one weapon for the main weapon, a laser, it can be used for secondary weapons and ammo based weapons etc.<\/p>\r\n\r\n<p style=\"direction: ltr;\">the weapon class also dosnt care about the weapon object you use or how it looks,it will generate the &quot;bullet&quot; you need anywhere you need it.<\/p>\r\n\r\n<p style=\"direction: ltr;\">it will have built in fire rate and any function the player or ai needs.<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<h3 style=\"direction: ltr;\">variables\/attributes:<\/h3>\r\n\r\n<p dir=\"ltr\"><strong>ye<\/strong>: short for yoel engine, this is my useful functions library i add to all my projects.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>bullet<\/strong>: the bullet scene, a weapon genrates bullets.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>that<\/strong>: reference to the parent object,be it a ship or hardpoint or whatever. its not &quot;this&quot; its used as if its &quot;this&quot;(as if were coding in the parent object) but its &quot;that&quot;, a wordplay.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>weapon_name<\/strong>: the weapons name, by its name some stats will change etc, plus thats the name that will appear on the players gui.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>shot_timer<\/strong>: the timer for the weapons fire rate.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>shot_counter<\/strong>: the counter for the firate timer.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>dmg<\/strong>: the damage the weapons bullet deal (will be passed to the bullet object once its instantiated\/created).<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>bullet_speed<\/strong>: the speed that will be passed to the bullet (some weapons fire faster projectiles).<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>team<\/strong>: will also be passed to the bullet, the weapons team (1 is player team 2 is enemy team,there might be more teams in the future).<\/p>\r\n\r\n<h3 style=\"direction: ltr;\">methods\/functions:<\/h3>\r\n\r\n<p style=\"direction: ltr;\"><strong>yinit(that2,fire_rate)<\/strong>: the init function of the weapon, sets the weapons parent (&quot;that&quot;) and the weapons fir rate. in the future weapon stats will be set by the name, although some ships can fire faster so that stat will stay at init.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>can_shot_ai<\/strong>: when the ai wants to shot the weapon it calls&nbsp;can_shot_ai, if the weapon is ready to shot it will return true. all it does is check if fir rate timer is done. pass to it the game loop delta (from _physics_process).<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>can_shot<\/strong>: same as&nbsp; &quot;can_shot_ai&quot; the only difference is that we check for players input.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>make_bullet(gun)<\/strong>: will create a bullet instance at the position of the &quot;gun&quot; argument &quot;gun&quot; is a 3d node,usually a point at the barrle of said gun(or guns).<\/p>\r\n\r\n<p style=\"direction: ltr;\">the bullet also gets all the data it needs like dmg,speed etc.<\/p>\r\n\r\n<p style=\"direction: ltr;\">funaly it returns the bullet object reference (incase you need it).<\/p>\r\n\r\n<p style=\"direction: ltr;\">the bullet is add as a chiled of &quot;that&quot; the parrent object.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>make_bullet_ai(gun)<\/strong>: the same as &quot;make_bullet&quot; (it even uses make bullet), besides for that it rotates the bullet to the weapons parent (that) target plus the targets velocity (like the ai aimes at where the target will soon be &quot;aim down a target&quot;). its quit accurate at hitting things.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>set_weapon_stats_by_name<\/strong>: this func does what it says, it will change the weapons stats by the name of the weapon passed to it. good for changing weapons at loadout screen or even in game.<\/p>\r\n\r\n<p style=\"direction: ltr;\">not implemented much as of yet (i want to leave stuff like that for contributors)<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n",
	"fighter_gdscript":"<h2>fighter<\/h2>\r\n<p style=\"direction: ltr;\">fighter is the &quot;class&quot; script that handles enemy and allay fighter, what a fighter basically does is target and attack fighters that are not in its team.<\/p>\r\n\r\n<p style=\"direction: ltr;\">for now its very simple, thers one type with one weapon (laser).<\/p>\r\n\r\n<p style=\"direction: ltr;\">in the future it might have other ai like fly in a wing and other tactics.<\/p>\r\n\r\n<p style=\"direction: ltr;\">it will also be able to use secondary weapons like missiles etc.<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<h3 style=\"direction: ltr;\">variables and attributes:<\/h3>\r\n\r\n<p style=\"direction: ltr;\"><strong>ye<\/strong>: is short for &amp;quot;yoel engine&amp;quot; which is a helper class with useful functions i put in every one of my projects (in fact i have one like it for almost every game project i made not only in godot).<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>bullet<\/strong>: not used (used in weapon.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>main_weapon<\/strong>: the fighter main weapon logic class<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>explotion<\/strong>: the particale effects object that spawns when the fighter is&nbsp;destroyed.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>enemy_pointer<\/strong>:its a 2d sprite on the players screens that points in the enemies general direction.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>rng<\/strong>: random number genrator<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>max_hp<\/strong>: the fighters maximum hp (incase hp needs to be reset etc).<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>hp<\/strong>: the ships hit points when it reaches 0 the ship explodes. its the ships hull integrity.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>max_shield<\/strong>:the ships maximum shield used for the same perpouse as&nbsp;max_hp<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>shield<\/strong>: when the ship gets hit the shield will be reduced before the hp.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>shield_timer,shield_timer_count<\/strong>:the time it takes for the shield to regenerate to full again (rest to&nbsp;max_shield).<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>speed<\/strong>: the ships movment speed add to the volocity.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>rotate_speed<\/strong>:the speed of rotation twords target used with ye.look_at_slow insead of the regular look_at func<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>velocity<\/strong>:the ships world velocity, add to the ships position every tic.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>targ_old<\/strong>: not used yet, it was made to keep a reference of the ships previous target\/<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>targ<\/strong>: the ships target for now its a ship from another team it will shoot at or try to move close too etc.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>rnd_targ<\/strong>:a random position it will fly to around&nbsp;targ.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>rnd_targ_reached<\/strong>: a flag that tells us&nbsp;rnd_targ position was reached.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>dead<\/strong>: when the ship is destroyed this will be true<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>state<\/strong>: what the ai does now like &quot;move_random&quot; to move to a random position around the target or &quot;chase&quot; to chase the target. for each state thers a code that runs ones the ship ai enters that state.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>team<\/strong>: the ships team, the ship will only target ships not from its team<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>modal<\/strong>: the ships 3d modal node<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<h3 style=\"direction: ltr;\">functions\/methods:<\/h3>\r\n\r\n<p style=\"direction: ltr;\"><strong>_ready()<\/strong>: the init function. ads the fighter to &quot;enemy&quot; group, this needs to be changed to ai_fighter or somthing.<\/p>\r\n\r\n<p style=\"direction: ltr;\">it also inits the ships weapon.<\/p>\r\n\r\n<p style=\"direction: ltr;\">finaly if its team 1 (the players team) change its texture color to yellow.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>_physics_process<\/strong>:<\/p>\r\n\r\n<p style=\"direction: ltr;\">the main update function, runs these functions :find\/set target, move shot and update shield.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>take_dmg<\/strong>:if an object with the bullet class enters this ships area,this function will be called. the &quot;hit&quot; argument is the object that hit this ships area.<\/p>\r\n\r\n<p style=\"direction: ltr;\">first thing remove the bullet, then make sure its not from the same team (thers no friendly fire).<\/p>\r\n\r\n<p style=\"direction: ltr;\">after that check if shield is bigger then 0,if so reduce shield by the bullets dmg,make shield navmesh visible.<\/p>\r\n\r\n<p style=\"direction: ltr;\">if the damage takes down the shield it passes to the hull (reduce hp).<\/p>\r\n\r\n<p style=\"direction: ltr;\">if there is no shield reduce hp.<\/p>\r\n\r\n<p style=\"direction: ltr;\">ih hp is smaller then 0 destroy ship,make an&nbsp; explosion instance,add it to the parent scene of this ship, activate explode to activate the particle emitters of the&nbsp; explosion scene.finaly remove this object.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>set_target<\/strong>:the goal of the function is to set a target to this ship to attack and follow,ut tries to target the player or any other ship not in its team.<\/p>\r\n\r\n<p style=\"direction: ltr;\">sets the target &quot;targ&quot; to the player or any other fighter (&quot;enemy&quot; type),will target player if its at 300 distance.<\/p>\r\n\r\n<p style=\"direction: ltr;\">after that loop all fighters and if a fighter is on another team (that is not this ships team) and the target needs to be at a 1000 range. when it finds a target set it to targ and exit the function<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>move<\/strong>:<\/p>\r\n\r\n<p style=\"direction: ltr;\">first if thers no target exit function (hod position\/dont move).<\/p>\r\n\r\n<p style=\"direction: ltr;\">then if thers a target make sure its not null and valid ( valid means active in the scene,hasnt been removed by free_queue.<\/p>\r\n\r\n<p style=\"direction: ltr;\">so if thers a target do one of the states :move_random or&nbsp; chase<\/p>\r\n\r\n<p style=\"direction: ltr;\">&quot;move_random&quot; moves to a random position around the target targ, when it does switch to &quot;chase&quot; state.<\/p>\r\n\r\n<p style=\"direction: ltr;\">in &quot;chase&quot; state try to get close to the target targ, when in a radius of the target switch to &quot;move_random&quot; state.<\/p>\r\n\r\n<p style=\"direction: ltr;\">the ship needs to move to a random position using the &quot;move_random&quot; state to simulate a human pilot behavior that fly around to evade bieng shot,etc and when it gets to close to another ship move to a random position to reposition and then go to chase to get close to target and shot it.<\/p>\r\n\r\n<p style=\"direction: ltr;\">the only thing the states do basically change the ship's rotation.<\/p>\r\n\r\n<p style=\"direction: ltr;\">outside of the states move moves the ship on its z axis, basically moving in the direction of its rotation, using these two lines:<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp; &nbsp; &nbsp; &nbsp; #enemy velocity (move forward<\/p>\r\n\r\n<p style=\"direction: ltr;\"><code>&nbsp; &nbsp; &nbsp; &nbsp; velocity = -transform.basis.z * speed<\/code><\/p>\r\n\r\n<p style=\"direction: ltr;\"><code>&nbsp; &nbsp; &nbsp; &nbsp; #move<\/code><\/p>\r\n\r\n<p style=\"direction: ltr;\"><code>&nbsp; &nbsp; &nbsp; &nbsp; move_and_collide(velocity * delta)<\/code><\/p>\r\n\r\n<p style=\"direction: ltr;\">maybe in the future it will change when new behaviors will be add.<\/p>\r\n\r\n<p style=\"direction: ltr;\">thats kind of the meat of this class,the movement behavior.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>shield_do<\/strong>: makes the shield mesh not visble if its visable. the shield mesh is only visible for an instant when the ship is hit.<\/p>\r\n\r\n<p style=\"direction: ltr;\">the other thing is does is check if shield is less then max shield, start the shield timer when its done regenerate one shield point.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>shot<\/strong>:<\/p>\r\n\r\n<p style=\"direction: ltr;\">check if targ (the target) is not null,then check if its valid,if its not make target null (so it will look for a new target using &quot;set_target&quot; in the update function (&quot;_physics_process&quot; for now) .<\/p>\r\n\r\n<p style=\"direction: ltr;\">if the target is close (less then 100 distance) try shooting by calling &quot;main_weapon.can_shot_ai&quot;,here we need the ai version of&nbsp; weapons &quot;can_shot&quot; func.<\/p>\r\n\r\n<p style=\"direction: ltr;\">if the weapon can shoot loop all nodes under $guns node, for each gun barrel position create a bullet using &quot;make_bullet_ai&quot;,&nbsp;make_bullet_ai will rotate the bullet to the targets rotation and the bullet will fly towards the target.<\/p>\r\n\r\n<p style=\"direction: ltr;\">look_at_slow: not used, i moved it to yframework.gd&nbsp; as its a very usefull func.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n",
	"player_gdscript":"<h2>player gdscript<\/h2>\r\n\r\n<p>this code handles everything related to player actions and player status, ui value changes.<\/p>\r\n\r\n<p>weapons, movement, collision detection and everything else the player needs todo.<\/p>\r\n\r\n<p>for now thers only kyboard movment.<\/p>\r\n\r\n<p>for now the only weapon used is the basic laser weapon.<\/p>\r\n\r\n<h3>variables and attributes:<\/h3>\r\n\r\n<p>ye: is short for &quot;yoel engine&quot; which is a helper class with useful functions i put in every one of my projects (in fact i have one like it for almost every game project i made not only in godot).<\/p>\r\n\r\n<p><strong>bullet<\/strong>: it the bullet scene, not needed anymore as the weapon class handles bullets.<\/p>\r\n\r\n<p><strong>main_weapon<\/strong>: an instance of weapon class used to check if can shot ( checks the weapons delay timer) and to generate bullets for each gun<\/p>\r\n\r\n<p><strong>yinput_control<\/strong>: a string holding the input type the player uses, for now its only keyboard.<\/p>\r\n\r\n<p><strong>max_speed<\/strong>: the maximum speed the ship can move<\/p>\r\n\r\n<p><strong>acceleration<\/strong>: the rate which the ship accelerates or decelerate (like if you click the acceleration btn it will accelerate by the &quot;acceleration&quot; value per game update\/tic).<\/p>\r\n\r\n<p><strong>pitch_speed<\/strong>: pitch rotation per game tic (how fast the ship rotates on its pitch)<\/p>\r\n\r\n<p><strong>roll_speed and&nbsp;yaw_speed<\/strong>: same as&nbsp;pitch_speed but for roll and yaw<\/p>\r\n\r\n<p><strong>max_yaw and&nbsp;max_roll<\/strong>: not used<\/p>\r\n\r\n<p><strong>input_response<\/strong>: when a keyboard btn is clicked ,input_response determines the speed of the rotation lerp (like if player clicks up down left or right). its the &quot;weight&nbsp;&quot; of the lerp godot func. il explain it deeper when i get to movement input function.<\/p>\r\n\r\n<p><strong>dmg<\/strong>: was used for the bullets dmg now weapon class handles the bullets damage.<\/p>\r\n\r\n<p><strong>velocity<\/strong>:the ships velocity vector every object in game that moves has it.<\/p>\r\n\r\n<p><strong>forward_speed<\/strong>: add to the&nbsp;velocity of the ship each tic, its the ships speed basically.<\/p>\r\n\r\n<p><strong>pitch_input<\/strong>: the final calculated pitch that the ship has to move after the player clicked a btn on the keyboard.<\/p>\r\n\r\n<p><strong>roll_input <\/strong>and&nbsp;yaw_input: same as pitch_input, but yaw is not used for now.<\/p>\r\n\r\n<p><strong>cam<\/strong>: its the ships current camera<\/p>\r\n\r\n<p><strong>team<\/strong>: the player ships team, 1 is for players team,2 for enemy, maybe there will more factions in game.<\/p>\r\n\r\n<p><strong>targ<\/strong>: the player ships target, for the target indicator and in the future for secondary weapons like homing missiles etc (&quot; current target&quot;).<\/p>\r\n\r\n<h3>functions\/methods:<\/h3>\r\n\r\n<p><strong>_ready<\/strong>: everything you need to init goes here, add the player to &quot;player&quot; group and init main weapon.<\/p>\r\n\r\n<p><strong>_process<\/strong>: the update function runs every game tic, runs&nbsp;point_to_target so the ships target pointer always points to ships targ (current enemy target).<\/p>\r\n\r\n<p><strong>_physics_process<\/strong>: same as&nbsp;_process but for everything related to movement ,inputs and collision detection<\/p>\r\n\r\n<p><strong>get_input<\/strong>: handles all players input ,using&nbsp;yinput_control to determine if mouce or keyboard controls,for now only keyboard, using the :keyboard_movment func.<\/p>\r\n\r\n<p>for controlling the ships speed you click R to make it go faster and F to lower speed.<\/p>\r\n\r\n<p>search for the comment &quot;#accelerate and decelerate&quot; to see the two ifs that does this.<\/p>\r\n\r\n<p>to increase or decrease the speed once a button is clicked we lerp the current &quot;forward_speed&quot; with the &quot;max_speed&quot; (maximum ship speed) with (normalized by) acceleration multiplied by delta.<\/p>\r\n\r\n<p>if you dont understand lerp read about it here:<\/p>\r\n\r\n<p>https:\/\/docs.godotengine.org\/en\/3.2\/classes\/class_@gdscript.html#class-gdscript-method-lerp<\/p>\r\n\r\n<p>https:\/\/docs.godotengine.org\/en\/stable\/tutorials\/math\/interpolation.html<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>i also add a button (when C is clicked) that matches the ship speed with the current target &quot;targ&quot; speed (search for &quot;compare target speed&quot; in player.gd).<\/p>\r\n\r\n<p>the code is simple:&nbsp;forward_speed = targ.speed<\/p>\r\n\r\n<p>thats it, in the if i make sure thers a target in the world using :&nbsp;&nbsp;is_instance_valid(targ)<\/p>\r\n\r\n<p>and i make sure the speed dosnt go over max speed.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>for shooting i used the mouse left click, so in one hand you control the ship and in the other you shot the main weapon (later the right mouse btn will be for secondery weapon). the code for handeling shooting is in weapon.gd in &quot;can_shot&quot; function.<\/p>\r\n\r\n<p>if the player can shot (clicked mouse and weapon firate timer is done) then loop all the objects in guns node ($guns) and por each gun call&nbsp;main_weapon.make_bullet(gun).<\/p>\r\n\r\n<p>notice we pass the gun node (which is just a 3dpoint) in weapon&nbsp;make_bullet will ceate a bullet at the position of the object passed to it (the gun).<\/p>\r\n\r\n<p>so if you have 8 guns it will shot from all of them once you click shot.<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><strong>take_dmg<\/strong>: is called by the bullet when it hits the ship, for now the only thing it does is remove the object that hit it (the bullet).<\/p>\r\n\r\n<p><strong>keyboard_movment<\/strong>:&nbsp;<\/p>\r\n\r\n<p>you get the input from the click event lerped with the current&nbsp;pitch_input\/roll_input ,normlize it with the&nbsp;input_response multiplied by delta.<\/p>\r\n\r\n<p>and then you change the object (kinematic body) basic transform rotation :<\/p>\r\n\r\n<p>transform.basis.rotated:<\/p>\r\n\r\n<p>https:\/\/docs.godotengine.org\/en\/3.2\/classes\/class_transform.html#class-transform-method-rotated<\/p>\r\n\r\n<p>ynormilze normlizes the vector.<\/p>\r\n\r\n<p>for the roll we affect the y rotation by&nbsp; &quot;roll_input * roll_speed * delta&quot;.<\/p>\r\n\r\n<p>same for x the &quot;pitch&quot;<\/p>\r\n\r\n<p>https:\/\/simple.wikipedia.org\/wiki\/Pitch,_yaw,_and_roll<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p><strong>point_to_target<\/strong>:<\/p>\r\n\r\n<p>its the function that points the red indecator (target2 node) towerds targ (the current target).<\/p>\r\n\r\n<p>in the code first thing i did is call all enemy objects using get by type (gets all objects that belong to a group in this case enemy).<\/p>\r\n\r\n<p>if there are enemies in&nbsp;enemies var (array), make red arrow in target2 visible, make it look at first enemy (at position 0 in enemies array) make it targ (the current target.<\/p>\r\n\r\n<p>else hide red arrow<\/p>\r\n\r\n<p>if target is not null and a valid instance,make red arrow (t$arget2 )look at targ (current target).<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n\r\n<p>&nbsp;<\/p>\r\n",
	"bullet_gdscript":"<h2>bullet gdscript<\/h2>\r\n<p style=\"direction: ltr;\">bullet script attached to any scene (with an area as its root node), will turn that scene into a bullet.<\/p>\r\n\r\n<h3 style=\"direction: ltr;\">variables attributes:<\/h3>\r\n\r\n<p style=\"direction: ltr;\"><strong>speed<\/strong>: the bullet movment speed<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>life_timer<\/strong>: the amount of time the bullet will exist beore bieng removed.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>life_counter<\/strong>: the timer counter, when its val is bigger then&nbsp;life_timer,the timer is done.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>dmg<\/strong>: how much dmg the bullet does.<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>team<\/strong>: the team of the weapon that shot the bullet.<\/p>\r\n\r\n<h3 style=\"direction: ltr;\">functions\/methods:<\/h3>\r\n\r\n<p style=\"direction: ltr;\"><strong>_ready()<\/strong>: init method, adds object to bullt group (all it does for now)<\/p>\r\n\r\n<p style=\"direction: ltr;\"><strong>_physics_process<\/strong>:<\/p>\r\n\r\n<p style=\"direction: ltr;\">under &quot;#move&quot; coment thers the line that moves the bullet object by adding the speed to its z axis(the bullet will move by its rotation set by the weapon who shot it).<\/p>\r\n\r\n<p style=\"direction: ltr;\">the var hit gets all the areas that overlap the bullets area (all the objects that colided with the bullet,hit test,collition detection etc etc).<\/p>\r\n\r\n<p style=\"direction: ltr;\">if hit is not null get the parent node of the first area that toched the bullet.<\/p>\r\n\r\n<p style=\"direction: ltr;\">if that parrent node\/object has the method &quot;take_dmg&quot;,call take dmg and pass to it this bullet (self in gdscript is &quot;this&quot;).<\/p>\r\n\r\n<p style=\"direction: ltr;\">finaly incrament the timer counter ,when its done remove the bullet.<\/p>\r\n\r\n<p style=\"direction: ltr;\">&nbsp;<\/p>\r\n",
	"big_ship_gdscript":"<h2>big ship gdscript</h2><p style=\"direction: ltr;\">the big ship script is for the capital ships ofvthe space sim, it is ment to be attached to any kinematic body based scene, so that you can create any capital ship modularly witout touching code.</p>\n\n<p style=\"direction: ltr;\">for now it only controls the ships movment,moving it to a distance from its target.</p>\n\n<p style=\"direction: ltr;\">many of its vars will be changed to &quot;export&quot; so they can be edited by none programers from the godot native editor.</p>\n\n<p style=\"direction: ltr;\">for now only team has the export keyword.</p>\n\n<h3 style=\"direction: ltr;\">variables/attributes:</h3>\n\n<p style=\"direction: ltr;\"><strong>ye</strong>: short for yoel engine, this is my usefull functions library i add to all my projects.</p>\n\n<p style=\"direction: ltr;\"><strong>bullet and&nbsp;&nbsp;explotion</strong>: are not used as of now.</p>\n\n<p style=\"direction: ltr;\"><strong>target</strong>: this variable will hold the big ships current target , the target it will move closer to.</p>\n\n<p style=\"direction: ltr;\"><strong>rotate_speed</strong>: the speed in whch the ship scene will rotate.</p>\n\n<p style=\"direction: ltr;\"><strong>speed</strong>: the ships movment speed.</p>\n\n<p style=\"direction: ltr;\"><strong>velocity</strong>:the volocity of the ship, all moving object in this game shod have volocity, used for movment functions or for changing the scene global transform vector. also used for targeting by weapons.</p>\n\n<p style=\"direction: ltr;\"><strong>weapon_range</strong>: the ship will stop once its within weapon range from its target.</p>\n\n<p style=\"direction: ltr;\"><strong>team: </strong>the ships team,if 1 its on the players team,2 is the enemy team, there might be more teams in the future.</p>\n\n<p style=\"direction: ltr;\">modal: the 3d meshinstance node of the ship (the ships 3d modal).</p>\n\n<h3 style=\"direction: ltr;\">methods and functions:</h3>\n\n<p style=\"direction: ltr;\"><strong>_ready</strong>: the init function of the ship, when inited, the ship will be add to the&nbsp;&quot;big ship&quot; group.</p>\n\n<p style=\"direction: ltr;\">after that the ship will change its color to red if its team is 2 (the metrial that has that color, for now its the 3rd matrial serfece of the modal, in the future this will be changes for other modals as we will have a couple).</p>\n\n<p style=\"direction: ltr;\">finaly we set this (self) as the parrent of all the ships hardpoints, by looping all the children of $hardpoints node,if the ship scene dosnt have that node there will be an error (for now make sure the ship has that spatial node).</p>\n\n<p style=\"direction: ltr;\"><strong>_physics_process</strong>: runs &quot;get_target&quot; and &quot;move&quot; every game tic/update&nbsp;</p>\n\n<p style=\"direction: ltr;\"><strong>get_target</strong>: if there is no target loop all big ship, if it findes a big ship from another team set it as the target.</p>\n\n<p style=\"direction: ltr;\">move: if no target exit function.</p>\n\n<p style=\"direction: ltr;\">else rotate towerds target slowly using&nbsp;ye.look_at_slow (a function i wrote that does look_at but with a speed you can detrmine) it gets the target object,game loop delta and the rotation speed.</p>\n\n<p style=\"direction: ltr;\">after that get the distance from the target using&nbsp;ye.dist_3dvt (get distance between object and vector) the object is this ship &quot;self&quot; the vector is the targets&nbsp;global_transform origin.</p>\n\n<p style=\"direction: ltr;\">then check if within weapons range,if so stop ship (exit function).</p>\n\n<p style=\"direction: ltr;\">the last part is just moving the ship by volocity (ship z pos multiplied by speed).</p>\n\n<p style=\"direction: ltr;\">&nbsp;</p>\n"
};